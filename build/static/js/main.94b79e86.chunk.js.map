{"version":3,"sources":["components/renderScene.js","components/map/index.jsx","index.js"],"names":["box","onRender","scene","undefined","deltaTimeInMillis","getEngine","getDeltaTime","rotation","y","Math","PI","RenderScene","texturePath","antialias","onSceneReady","camera","ArcRotateCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","faceUV","Array","fill","Vector4","MeshBuilder","CreateBox","width","height","mapMaterial","StandardMaterial","diffuseTexture","Texture","material","position","CreateGround","id","style","MapContainer","styled","div","mapboxgl","accessToken","Map","mapContainer","useRef","useState","lng","setLng","lat","setLat","zoom","setZoom","showCube","setShowCube","useEffect","map","current","container","center","attributionControl","on","getCenter","toFixed","getZoom","remove","imageUrl","setImageUrl","className","ref","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94b79e86.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ArcRotateCamera,\n  Vector3,\n  HemisphericLight,\n  MeshBuilder,\n  StandardMaterial,\n  Texture,\n  Vector4,\n} from \"@babylonjs/core\";\nimport SceneComponent from \"babylonjs-hook\"; \nlet box;\n\nconst onSceneReady = (scene, texturePath) => {\n  var camera = new ArcRotateCamera(\n    \"camera1\",\n    0,\n    0,\n    0,\n    new Vector3(0, 0, -10),\n    scene\n  )\n  camera.setTarget(Vector3.Zero());\n\n  const canvas = scene.getEngine().getRenderingCanvas();\n  camera.attachControl(canvas, true);\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n  light.intensity = 0.7;\n  let faceUV = new Array(6);\n  faceUV.fill(new Vector4(0, 0, 1, 1));\n  faceUV[0] = new Vector4(0, 0, -1, -1);\n\n  box = MeshBuilder.CreateBox(\n    \"box\",\n    { width: 5, height: 5, faceUV: faceUV },\n    scene\n  );\n  var mapMaterial = new StandardMaterial(\"mapMaterial\", scene);\n  mapMaterial.diffuseTexture = new Texture(`${texturePath}`, scene);\n  box.material = mapMaterial;\n\n  box.position.y = 0;\n\n  MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n};\n\nconst onRender = (scene) => {\n  if (box !== undefined) {\n    var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n\n    const rpm = 10;\n    box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n  }\n};\n\nconst RenderScene = ({ texturePath }) => (\n  <div>\n    <SceneComponent\n      antialias\n      onSceneReady={(scene) => {\n        onSceneReady(scene, texturePath);\n      }}\n      onRender={onRender}\n      id=\"my-canvas\"\n      style={{  width: 600, height: 600}}\n    />\n  </div>\n);\n\nexport default RenderScene;\n","import mapboxgl from \"mapbox-gl\";\nimport { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport RenderScene from \"../renderScene\";\nimport  './index.scss';\n\nconst MapContainer = styled.div`\n  width: 50vw;\n  height: 50vh;\n`;\n\nmapboxgl.accessToken = \"pk.eyJ1Ijoic2h1YmhhbWt1bWF3YXQ3ODkiLCJhIjoiY2tvM3hoOG9kMWRtMjJ1azQwNmlqMmpkdiJ9.1rAuBqANI9uOd4bzVbdxyg\";\n\nconst Map = () => {\n  const mapContainer = useRef();\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(0);\n  const [zoom, setZoom] = useState(0);\n  const width = 500;\n  const height = 300;\n\n  const [showCube, setShowCube] = useState(false);\n  const off= function(){ \n    setShowCube(!showCube)\n\n  }\n  useEffect(() => {\n    let map;\n    if (mapContainer.current) {\n      map = new mapboxgl.Map({\n        container: mapContainer.current, \n        style: \"mapbox://styles/mapbox/streets-v11\", \n        center: [75.857,22.719], \n        zoom: 12, \n        attributionControl: false\n      });\n      \n\n      map.on(\"move\", () => {\n        setLng(map.getCenter().lng.toFixed(4));\n        setLat(map.getCenter().lat.toFixed(4));\n        setZoom(map.getZoom().toFixed(2));\n      });\n    }\n\n    return () => map.remove();\n  }, []);\n  \n\n  const [imageUrl, setImageUrl] = useState(null);\n  useEffect(() => {\n    setImageUrl(\n      `https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/${lng},${lat},${zoom},0/${width}x${height}?access_token=${mapboxgl.accessToken}`\n    );\n  }, [lat, lng, width, height, zoom]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"image\">     \n        <MapContainer\n          id=\"map\"\n          ref={mapContainer}\n          style={{ width: 600, height: 700 }}\n          />        \n      </div>\n     <div className=\"render\">\n        <button className=\"button\"\n          onClick={() => {off()}}\n          \n        >\n          {showCube ? 'Hide' : 'Show'} 3D\n        </button>\n        {imageUrl && showCube && <RenderScene texturePath={imageUrl} />}\n        \n        </div>\n    </div>\n    \n  );\n  \n};\n\nexport default Map;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from \"./components/map/index\";\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}